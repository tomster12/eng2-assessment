
context Product {

  @critique
  constraint UniqueName {
    check : Product.all.select(p | p.name = self.name).size = 1
    message : "Product name '" + self.name + "' is duplicated."
  }
}

context TotalPercentDiscountAction {
  @critique
  constraint PercentageInRange {
    check : self.percentage >= 0 and self.percentage <= 100
    message : "Percentage must be between 0 and 100."
  }
}

context TargetPercentDiscountAction {
  @critique
  constraint PercentageInRange {
    check : self.percentage >= 0 and self.percentage <= 100
    message : "Percentage must be between 0 and 100."
  }
}

context OfferRule {

  @critique
  constraint OnlyOneInitialRule {
    guard : self.isInitial()
    check : OfferRule.all.select(r | r.isInitial()).size = 1
    message : "There must be exactly one initial rule."
  }
}

context OfferRule {

  @critique
  constraint AlwaysExclusive {
    guard : not self.triggersAlways.isUndefined()
    check : self.triggersIfMatch.isUndefined() and
            self.triggersIfNotMatch.isUndefined()
    message : "Rule '" + self.name + "' uses 'always' so it cannot use 'ifMatch' or 'ifNotMatch'."
  }
}

context OfferRule {

  @critique
  constraint NoCycles {
    check : not self.hasCycles(Sequence{})
    message : "Rule '" + self.name + "' participates in a trigger cycle."
  }
}

operation OfferRule isInitial() : Boolean {
  return OfferRule.all.select(o |
    o.triggersIfMatch == self or
    o.triggersIfNotMatch == self or
    o.triggersAlways == self
  ).isEmpty();
}

operation OfferRule hasCycles(visited : Sequence) : Boolean {
  if (visited.contains(self)) {
    return true;
  }

  visited.add(self);

  for (child in self.getChildren()) {
  	if (child.hasCycles(visited.clone())) {
  		return true;
  	}
  }
  
  return false;
}

operation OfferRule getChildren() : Sequence<OfferRule> {
  var children = Sequence{};
  if (not self.triggersIfMatch.isUndefined()) { children.add(self.triggersIfMatch); }
  if (not self.triggersIfNotMatch.isUndefined()) { children.add(self.triggersIfNotMatch); }
  if (not self.triggersAlways.isUndefined()) { children.add(self.triggersAlways); }
  return children;
}

