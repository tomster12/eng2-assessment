/**
 */
package uk.ac.york.cs.eng2.offers.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import uk.ac.york.cs.eng2.offers.util.OffersAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class OffersItemProviderAdapterFactory extends OffersAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public OffersItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.york.cs.eng2.offers.Model} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelItemProvider modelItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.york.cs.eng2.offers.Model}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelAdapter() {
		if (modelItemProvider == null) {
			modelItemProvider = new ModelItemProvider(this);
		}

		return modelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.york.cs.eng2.offers.Product} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProductItemProvider productItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.york.cs.eng2.offers.Product}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProductAdapter() {
		if (productItemProvider == null) {
			productItemProvider = new ProductItemProvider(this);
		}

		return productItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.york.cs.eng2.offers.Category} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CategoryItemProvider categoryItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.york.cs.eng2.offers.Category}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCategoryAdapter() {
		if (categoryItemProvider == null) {
			categoryItemProvider = new CategoryItemProvider(this);
		}

		return categoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.york.cs.eng2.offers.OfferRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OfferRuleItemProvider offerRuleItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.york.cs.eng2.offers.OfferRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOfferRuleAdapter() {
		if (offerRuleItemProvider == null) {
			offerRuleItemProvider = new OfferRuleItemProvider(this);
		}

		return offerRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.york.cs.eng2.offers.ProductTagCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProductTagConditionItemProvider productTagConditionItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.york.cs.eng2.offers.ProductTagCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProductTagConditionAdapter() {
		if (productTagConditionItemProvider == null) {
			productTagConditionItemProvider = new ProductTagConditionItemProvider(this);
		}

		return productTagConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.york.cs.eng2.offers.MinOrderValueCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MinOrderValueConditionItemProvider minOrderValueConditionItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.york.cs.eng2.offers.MinOrderValueCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMinOrderValueConditionAdapter() {
		if (minOrderValueConditionItemProvider == null) {
			minOrderValueConditionItemProvider = new MinOrderValueConditionItemProvider(this);
		}

		return minOrderValueConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.york.cs.eng2.offers.ProductNameCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProductNameConditionItemProvider productNameConditionItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.york.cs.eng2.offers.ProductNameCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProductNameConditionAdapter() {
		if (productNameConditionItemProvider == null) {
			productNameConditionItemProvider = new ProductNameConditionItemProvider(this);
		}

		return productNameConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.york.cs.eng2.offers.PercentageDiscountAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PercentageDiscountActionItemProvider percentageDiscountActionItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.york.cs.eng2.offers.PercentageDiscountAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPercentageDiscountActionAdapter() {
		if (percentageDiscountActionItemProvider == null) {
			percentageDiscountActionItemProvider = new PercentageDiscountActionItemProvider(this);
		}

		return percentageDiscountActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.york.cs.eng2.offers.FixedDiscountAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FixedDiscountActionItemProvider fixedDiscountActionItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.york.cs.eng2.offers.FixedDiscountAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFixedDiscountActionAdapter() {
		if (fixedDiscountActionItemProvider == null) {
			fixedDiscountActionItemProvider = new FixedDiscountActionItemProvider(this);
		}

		return fixedDiscountActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.york.cs.eng2.offers.AddFreeProductAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AddFreeProductActionItemProvider addFreeProductActionItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.york.cs.eng2.offers.AddFreeProductAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAddFreeProductActionAdapter() {
		if (addFreeProductActionItemProvider == null) {
			addFreeProductActionItemProvider = new AddFreeProductActionItemProvider(this);
		}

		return addFreeProductActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uk.ac.york.cs.eng2.offers.AddDiscountedProductAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AddDiscountedProductActionItemProvider addDiscountedProductActionItemProvider;

	/**
	 * This creates an adapter for a {@link uk.ac.york.cs.eng2.offers.AddDiscountedProductAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAddDiscountedProductActionAdapter() {
		if (addDiscountedProductActionItemProvider == null) {
			addDiscountedProductActionItemProvider = new AddDiscountedProductActionItemProvider(this);
		}

		return addDiscountedProductActionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (modelItemProvider != null) modelItemProvider.dispose();
		if (productItemProvider != null) productItemProvider.dispose();
		if (categoryItemProvider != null) categoryItemProvider.dispose();
		if (offerRuleItemProvider != null) offerRuleItemProvider.dispose();
		if (productTagConditionItemProvider != null) productTagConditionItemProvider.dispose();
		if (minOrderValueConditionItemProvider != null) minOrderValueConditionItemProvider.dispose();
		if (productNameConditionItemProvider != null) productNameConditionItemProvider.dispose();
		if (percentageDiscountActionItemProvider != null) percentageDiscountActionItemProvider.dispose();
		if (fixedDiscountActionItemProvider != null) fixedDiscountActionItemProvider.dispose();
		if (addFreeProductActionItemProvider != null) addFreeProductActionItemProvider.dispose();
		if (addDiscountedProductActionItemProvider != null) addDiscountedProductActionItemProvider.dispose();
	}

}
